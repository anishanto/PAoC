#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Updated with multi level text required month select to be removed tmk

RC = 0;

CubeName = 'Leases Fixed Rates';
ViewNameSource = 'VE-' | CubeName | '-zSource' ;
ViewNameTarget =  'VE-' | CubeName | '-zLoad' ;

CUBESETLOGCHANGES(CubeName, 0);

#  Destroy previous views and subsets for forecast transfer 

ViewDestroy (CubeName, ViewNameTarget);
SubsetDestroy ('Versions_PM', ViewNameTarget);
SubsetDestroy ('Event Name', ViewNameTarget);
SubsetDestroy ('Tenure ID', ViewNameTarget);
SubsetDestroy ('Fixed Rates Measures', ViewNameTarget);

# Create views and subsets to Zero out

SubsetCreate ('Versions_PM', ViewNameTarget);
SubsetElementInsert ( 'Versions_PM',  ViewNameTarget, pTargetVersion, 1);

# Create Event Name
sMDX = '{TM1SUBSETALL( [Event Name] )}';
SubsetCreatebyMDX( ViewNameTarget, sMDX);

# Create Tenure ID
sMDX = '{TM1SUBSETALL( [Tenure ID] )} ';
SubsetCreatebyMDX(ViewNameTarget, sMDX);

# Create Extension Options Measures
sMDX='{ EXCEPT( {TM1SUBSETALL( [Fixed Rates Measures] )}, { [Fixed Rates Measures].[Rates] }) }';
SubsetCreatebyMDX(ViewNameTarget, sMDX);

ViewCreate( CubeName, ViewNameTarget);
ViewSubsetAssign (CubeName, ViewNameTarget, 'Versions_PM', ViewNameTarget);
ViewSubsetAssign (CubeName, ViewNameTarget, 'Event Name', ViewNameTarget);
ViewSubsetAssign (CubeName, ViewNameTarget, 'Tenure ID', ViewNameTarget);
ViewSubsetAssign (CubeName, ViewNameTarget, 'Fixed Rates Measures', ViewNameTarget);
ViewRowDimensionSet(CubeName, ViewNameTarget,  'Versions_PM', 1);
ViewRowDimensionSet (CubeName, ViewNameTarget, 'Event Name', 2);
ViewRowDimensionSet (CubeName, ViewNameTarget, 'Tenure ID', 3);
ViewRowDimensionSet (CubeName, ViewNameTarget, 'Fixed Rates Measures',4);

# Zero out the Target values
# Zero out canceled as they intend to add manual events
#VIEWZEROOUT(CubeName, ViewNameTarget);

#Delete view to create source version 

ViewDestroy (CubeName, ViewNameSource);
SubsetDestroy ('Versions_PM', ViewNameSource);
SubsetDestroy ('Event Name', ViewNameSource);
SubsetDestroy ('Tenure ID', ViewNameSource);
SubsetDestroy ('Fixed Rates Measures', ViewNameSource);

SubsetCreate ('Versions_PM', ViewNameSource);
SubsetElementInsert ( 'Versions_PM',  ViewNameSource, pSourceVersion, 1);

# Create Event Name
sMDX = '{TM1SUBSETALL( [Event Name] )}';
SubsetCreatebyMDX( ViewNameSource, sMDX);

# Create Tenure ID
sMDX = '{TM1SUBSETALL( [Tenure ID] )} ';
SubsetCreatebyMDX( ViewNameSource, sMDX);

# Create Fixed Rates Measures
sMDX='{ EXCEPT( {TM1SUBSETALL( [Fixed Rates Measures] )}, { [Fixed Rates Measures].[Rates] }) }';
SubsetCreatebyMDX( ViewNameSource, sMDX);

# Create the Source view
ViewCreate( CubeName, ViewNameSource);
ViewSubsetAssign (CubeName, ViewNameSource, 'Versions_PM', ViewNameSource);
ViewSubsetAssign (CubeName, ViewNameSource, 'Event Name', ViewNameSource);
ViewSubsetAssign (CubeName, ViewNameSource, 'Tenure ID', ViewNameSource);
ViewSubsetAssign (CubeName, ViewNameSource, 'Fixed Rates Measures', ViewNameSource);
ViewRowDimensionSet(CubeName, ViewNameSource,  'Versions_PM', 1);
ViewRowDimensionSet (CubeName, ViewNameSource, 'Event Name', 2);
ViewRowDimensionSet (CubeName, ViewNameSource, 'Tenure ID', 3);
ViewRowDimensionSet (CubeName, ViewNameSource, 'Fixed Rates Measures',4);

ViewExtractSkipCalcsSet(CubeName, ViewNameSource, 0);
ViewExtractSkipZeroesSet(CubeName, ViewNameSource, 1);

# Set new views as the datasource:
    DatasourceNameForServer = CubeName;
    DatasourceCubeView = ViewNameSource;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

# Copy from source Version to Target Version
vMeasureType = DType('Fixed Rates Measures',vMeasures);
IF (vMeasureType @='S' & CellIsUpdateable(CubeName, pTargetVersion,vEvent,vTenure, vMeasures)=1);
	CellPutS (vValue, CubeName, pTargetVersion,vEvent,vTenure, vMeasures);
ELSEIF (vMeasureType@='N' & CellIsUpdateable(CubeName,  pTargetVersion,vEvent,vTenure, vMeasures)=1);
	vValueN = StringToNumber(vValue);
	CellPutN (vValueN, CubeName, pTargetVersion,vEvent,vTenure, vMeasures);
ENDIF;

# Copy Version Log
IF (RC = 0);
	Asciioutput('..\logs\System\CopyVersion.csv', 'TargetVersion','TenureID','EventName', 'FixedRatesMeasures','Value');
	RC = RC+ 1;
ENDIF;

Asciioutput('..\logs\System\CopyVersion.csv', pTargetVersion, 'TenureID',vEvent,vMeasures, vValue);


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

CUBESETLOGCHANGES(CubeName, 1);

ViewDestroy (CubeName, ViewNameSource);
SubsetDestroy ('Versions_PM', ViewNameSource);
SubsetDestroy ('Event Name', ViewNameSource);
SubsetDestroy ('Tenure ID', ViewNameSource);
SubsetDestroy ('Fixed Rates Measures', ViewNameSource);

ViewDestroy (CubeName, ViewNameTarget);
SubsetDestroy ('Versions_PM', ViewNameTarget);
SubsetDestroy ('Event Name', ViewNameTarget);
SubsetDestroy ('Tenure ID', ViewNameTarget);
SubsetDestroy ('Fixed Rates Measures', ViewNameTarget);
#endregion